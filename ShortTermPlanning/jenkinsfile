def scenarios = ['ux00', 'ux01', 'ux02','ux03', 'ux04','ux05']

pipeline {
    agent any

    stages {

        stage('Limpiar Workspace'){
            steps{
                sh 'rm -rf *'
            }
        }

        stage('Setup') {
            steps {
                script {
                    
                    // Making temporary forders
                    sh 'mkdir -p repoProyecto_temp'
                    sh 'mkdir -p STP_temp'

                    // CheckOut - from Docker repository
                    dir('repoProyecto_temp'){
                        checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://where_your_driving_repo_is_located.git']])
                        // checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'your_relevant-credential', url: 'git@github.com:Your_relevant_repo']])
                    }

                    // CheckOut - Remote repo with the STP code
                    dir('STP_temp') {
                        checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'your_relevant_credential', url: 'git@github.com:Your_relevant_repo']])
                    }

                    // Clean evertything else ...
                    sh 'find . -maxdepth 1 -type d ! -name "." ! -name "repoProyecto_temp" ! -name "STP_temp" -exec rm -rf {} +'
                    sh 'find . -maxdepth 1 -type f ! -name "." ! -name "repoProyecto_temp" ! -name "STP_temp" -delete'

                    // Copy the STP repo into every single scenario
                    scenarios.each { scenario ->
                        sh "rsync -av STP_temp/ repoProyecto_temp/scenarios/${scenario}/"     
                        sh "rsync -av repoProyecto_temp/base/ repoProyecto_temp/scenarios/${scenario}/"                        
                   
                    }

                    sh "rsync -av STP_temp/ repoProyecto_temp/base/"

                    // Clean everthing else out of the repoProyecto_temp folder
                    sh 'find . -maxdepth 1 -type d ! -name "." ! -name "repoProyecto_temp" -exec rm -rf {} +'
                    sh 'find . -maxdepth 1 -type f ! -name "." ! -name "repoProyecto_temp" -delete'

                }
            }
        }

        stage('Build and Check the scenarios') {
            steps {
                script {
                    def successfulScenarios = []
                    def failedScenarios = []

                    scenarios.each { scenario ->
                        try {
                            dir("repoProyecto_temp/scenarios/${scenario}") {
                                env.PATH = "/usr/local/bin:${env.PATH}"
                                sh "docker-compose up -d --build"
                                sleep(time: 60, unit: "SECONDS")

                                def logFiles = sh(script: "find . -name 'DynReact-Gen-*.log'", returnStdout: true).trim().split('\n')
                                if (logFiles.length > 0 && logFiles[0]) {
                                    def expectedPatternsFile = "expected_patterns.txt"
                                    def expectedPatterns = readFile(expectedPatternsFile).readLines()
                                    def anyPatternFound = false

                                    logFiles.each { logFile ->
                                        if (logFile) {
                                            echo "Verifying log file: ${logFile}"
                                            def logContent = readFile(logFile)
                                            def allPatternsFound = true

                                            expectedPatterns.each { pattern ->
                                                if (!logContent.contains(pattern)) {
                                                    echo "Expected pattern not found in ${logFile}: ${pattern}"
                                                    allPatternsFound = false
                                                }
                                            }

                                            if (allPatternsFound) {
                                                echo "Log verification successful for file: ${logFile}"
                                                anyPatternFound = true
                                            }
                                        }
                                    }

                                    if (!anyPatternFound) {
                                        error "No log file met the expected patterns for scenario ${scenario}"
                                    }
                                } else {
                                    error "Log files not found for scenario ${scenario}"
                                }

                                if (scenario in ['ux02', 'ux03','ux04','ux05','ux06','ux07']) {
                                    def auctionLogFile = sh(script: "find . -name 'DynReact-*.log' ! -name 'DynReact-Gen-*.log'", returnStdout: true).trim()
                                    if (auctionLogFile) {
                                        def auction = auctionLogFile.replaceAll('.*DynReact-(.*)\\.log', '$1')
                                        def logContent = readFile(auctionLogFile)
                                        def expectedPatterns = readFile("expected_patterns.txt").readLines().collect { it.replace("{auction}", auction) }
                                        def allPatternsFound = true

                                        expectedPatterns.each { pattern ->
                                            if (!logContent.contains(pattern)) {
                                                echo "Expected Auction pattern not found in ${auctionLogFile}: ${pattern}"
                                                allPatternsFound = false
                                            }
                                        }

                                        if (allPatternsFound) {
                                            echo "Log verification successful for auction log file: ${auctionLogFile}"
                                        } else {
                                            error "Log verification failed for auction log file: ${auctionLogFile}"
                                        }
                                    } else {
                                        error "Auction log file not found for scenario ${scenario}"
                                    }
                                }

                                sh "docker-compose down"
                            }
                            successfulScenarios.add(scenario)
                        } catch (Exception e) {
                            echo "Failed to verify scenario ${scenario}: ${e.message}"
                            failedScenarios.add(scenario)
                        }
                    }

                    echo "Successful scenarios: ${successfulScenarios}"
                    echo "Failed scenarios: ${failedScenarios}"
                }
            }
        }

        stage('Create Results') {
            steps {
                script {
                    // Folder 'results' creation
                    sh 'mkdir -p results'

                    // Transverse each scenario and copy .log files and folder log
                    scenarios.each { scenario ->
                        sh "mkdir -p results/${scenario}"
                        
                        // Copy files .log if available
                        try {
                            sh "cp repoProyecto_temp/scenarios/${scenario}/*.log results/${scenario}/ || true"
                        } catch (Exception e) {
                            echo "No .log files found for scenario ${scenario}, skipping .log file copy."
                        }
                        
                        // Copy the logs directory, when available.
                        try {
                            sh "cp -r repoProyecto_temp/scenarios/${scenario}/logs results/${scenario}/ || true"
                        } catch (Exception e) {
                            echo "No logs directory found for scenario ${scenario}, skipping logs directory copy."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Halt and destroy all Docker containers
                sh 'docker ps -aq | xargs -r docker stop | xargs -r docker rm'
                
                // Clean all the Docker images used
                sh 'docker system prune -af'
                
                // Alternatively, removing all the images, includining those in use
                sh 'docker rmi $(docker images -q) || true'
            }
        }
    }
}
